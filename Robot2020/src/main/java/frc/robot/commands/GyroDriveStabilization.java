package frc.robot.commands;



import edu.wpi.first.wpilibj.command.Command;
import frc.robot.Robot;
import frc.robot.subsystems.Drivetrain;


public class GyroDriveStabilization extends Command {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
   
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public GyroDriveStabilization() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }
    double heading;
    // Called just before this Command runs the first time
    @Override
    protected void initialize() {
        heading = Robot.imu.getAngle();
        System.out.println("Running Stabilization\nHeading is :"+(Math.round(heading)));
    }
    // Called repeatedly when this Command is scheduled to run
    @Override
    protected void execute() {

        if(Robot.imu.getAngle() < heading){
            Drivetrain.leftMotor.set((Drivetrain.leftMotor.getSpeed() + Drivetrain.leftMotor.getSpeed() / 10));
                } else {
            Drivetrain.rightMotor.set((Drivetrain.rightMotor.getSpeed() + Drivetrain.rightMotor.getSpeed()/10));
                }


        /* 
        double turningValue = (Drivetrain.kAngleSetpoint - Robot.imu.getAngle()) * Drivetrain.kP;
        System.out.println("Turning Value: " + turningValue);
        // Invert the direction of the turn if we are going backwards
        double Yvalue = OI.joystick.getY();
        System.out.println("Joystick Value: " + Yvalue);
        turningValue = Math.copySign(turningValue, Yvalue);
        System.out.println("Turning Value Copysign: " + turningValue);
        Drivetrain.westCoastTankDrive.arcadeDrive(OI.joystick.getX(), turningValue);
        //double error = -Robot.imu.getRate();    
        */
    }
    // Make this return true when this Command no longer needs to run execute()
    @Override
    protected boolean isFinished() {
        return false;
    }

    // Called once after isFinished returns true
    @Override
    protected void end() {
        
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    @Override
    protected void interrupted() {
    }
}
